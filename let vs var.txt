In JavaScript, var and let are used to declare variables, but they have important differences related to scope, hoisting, and re-declaration:
1. var

    Scope: var is function-scoped. If a variable is declared using var inside a function, it is accessible throughout that function. However, if declared inside a block (like an if or for block), it will still be accessible outside that block.


function test() {
    if (true) {
        var x = 10;
    }
    console.log(x); // 10 (accessible outside the block)
}

Hoisting: Variables declared with var are hoisted to the top of their scope (function or global) but are initialized with undefined. This means you can reference them before they are declared, though they will hold undefined until the line where they are assigned a value.

console.log(a);  // undefined (hoisted but uninitialized)
var a = 5;

Re-declaration: You can redeclare a variable using var within the same scope without any errors.
var x = 10;
var x = 20;  // No error
console.log(x);  // 20

This means that irrespective of where the variables and functions are declared, they are moved on top of the scope. The scope can be both local and global.

Note - Variable initializations are not hoisted, only variable declarations are hoisted:

Note - To avoid hoisting, you can run javascript in strict mode by using “use strict” on top of the code:





let:

Scope: let is block-scoped. This means it is only accessible within the block (like a loop, if block, etc.) in which it is declared.
if (true) {
    let y = 10;
}
console.log(y);  // ReferenceError (y is not defined outside the block)


Hoisting: Variables declared with let are hoisted but are not initialized. This creates a temporal dead zone (TDZ), meaning you cannot access the variable before the line where it is declared.

console.log(b);  // ReferenceError (in TDZ)
let b = 5;

Re-declaration: let does not allow re-declaration within the same scope. If you try to declare a variable with let again in the same scope, it will result in an error.

let z = 10;
let z = 20;  // SyntaxError: Identifier 'z' has already been declared


# Comparison between `var` and `let` in JavaScript

| Feature             | `var`                                          | `let`                                |
|----------------    -|------------------------------------            |--------------------------------------|
| **Scope**           | Function-scoped                                | Block-scoped                        |
| **Hoisting**        | Hoisted and initialized with `undefined`       | Hoisted but not initialized (TDZ)   |
| **Re-declaration**  | Allowed in the same scope                   | Not allowed in the same scope         |
| **Usage**           | Older way of declaring variables               | Modern and preferred way of declaring variables |
| **Initialization**   | Optional during declaration                  | Optional, but better practices often include initialization |


